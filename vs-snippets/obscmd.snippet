<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Comando observante de MCART</Title>
      <Shortcut>obscmd</Shortcut>
      <Description>Fragmento de código para agregar un nuevo comando observante para un ViewModel de MCART.</Description>
      <Author>César Andrés Morgan</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>			
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Nombre del comando.</ToolTip>
          <Default>DoSomething</Default>
        </Literal>
        <Literal>
          <ID>prop</ID>
          <ToolTip>Propiedad observada.</ToolTip>
          <Default>SomeProperty</Default>
        </Literal>
        <Literal Editable="false">
          <ID>ObservingCommand</ID> 
          <Function>SimpleTypeName(global::TheXDS.MCART.ViewModel.ObservingCommand)</Function> 
        </Literal>
      </Declarations>
      <Imports>
        <Import>
          <Namespace>TheXDS.MCART.ViewModel</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp" Kind="method decl"><![CDATA[
/// <summary>
///     Obtiene el comando relacionado a la acción $name$.
/// </summary>
/// <returns>El comando $name$.</returns>
public ICommand $name$Command { get; }
// Inserte en el constructor del tipo:
// $name$Command = new ObservingCommand(this, On$name$)
//     .SetCanExecute(Can$name$)
//     .RegisterObservedProperty(() => $prop$);

private void On$name$()
{
    $end$
}

private bool Can$name$()
{
    return $prop$ is { };
}
      ]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>