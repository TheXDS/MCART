<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BinWriteXNotSupported" xml:space="preserve">
    <value>Writing values of type {0} is not supported using this method. Use the metod {1} defined in the {2} class instead.</value>
  </data>
  <data name="CantWriteObjOfT" xml:space="preserve">
    <value>Cant write an object of type {0}.</value>
  </data>
  <data name="CircularOpDetected" xml:space="preserve">
    <value>Circular operation detected.</value>
  </data>
  <data name="ClassNotInstantiable" xml:space="preserve">
    <value>The specified class is not instantiable.</value>
  </data>
  <data name="ClassNotInstantiableWIthArgs" xml:space="preserve">
    <value>The {0} class cound not be instantiated using the specified parameters.</value>
  </data>
  <data name="ClassXNotinstantiable" xml:space="preserve">
    <value>The {0} class is not instantiable.</value>
  </data>
  <data name="DuplicateData" xml:space="preserve">
    <value>Data with the id '{0}' already exists.</value>
  </data>
  <data name="EmptyCollection" xml:space="preserve">
    <value>The collection does not contain any elements.</value>
  </data>
  <data name="EnumerableTypeExpected" xml:space="preserve">
    <value>Enumerable type expected.</value>
  </data>
  <data name="EnumTypeExpected" xml:space="preserve">
    <value>The {0} type is not a valid Enumerable type.</value>
  </data>
  <data name="ErrorLoadingLicense" xml:space="preserve">
    <value>An error has been produced while trying to read the license contents.</value>
  </data>
  <data name="ErrorLoadingRes" xml:space="preserve">
    <value>There's been an error trying to load the {0} resource.</value>
  </data>
  <data name="FieldValueShouldNotBeNull" xml:space="preserve">
    <value>The value of the {0} field must not be null.</value>
  </data>
  <data name="FormatNotSupported" xml:space="preserve">
    <value>The format '{0}' is not supported.</value>
  </data>
  <data name="InvalidArgument" xml:space="preserve">
    <value>The argument '{0}' has an invalid value in this context.</value>
  </data>
  <data name="InvalidFuncReturnValue" xml:space="preserve">
    <value>The method '{0}' has returned an invalid value in this context.</value>
  </data>
  <data name="InvalidFuncXReturnValue" xml:space="preserve">
    <value>The method '{0}' has returned '{1}', which is an invalid value in this context.</value>
  </data>
  <data name="InvalidMethodSignature" xml:space="preserve">
    <value>The method has an invalid signature.</value>
  </data>
  <data name="InvalidMethodXSignature" xml:space="preserve">
    <value>The method '{0}' has ian invalid signature.</value>
  </data>
  <data name="InvalidReturnValue" xml:space="preserve">
    <value>The method has returned an invalid value in this context.</value>
  </data>
  <data name="InvalidSelectorExpression" xml:space="preserve">
    <value>The expression used in this context must be selecting a member.</value>
  </data>
  <data name="InvalidType" xml:space="preserve">
    <value>The type is not valid in this context.</value>
  </data>
  <data name="InvalidUri" xml:space="preserve">
    <value>The URI points to an invalid resource.</value>
  </data>
  <data name="InvalidValue" xml:space="preserve">
    <value>The value is not valid in this context.</value>
  </data>
  <data name="InvalidXType" xml:space="preserve">
    <value>The type '{0}' is not valid in this context.</value>
  </data>
  <data name="InvalidXUri" xml:space="preserve">
    <value>The URI pointing to the resource '{0}' is not valid.</value>
  </data>
  <data name="InvalidXValue" xml:space="preserve">
    <value>The value '{0}' is not valid in this context.</value>
  </data>
  <data name="InX" xml:space="preserve">
    <value> in {0}</value>
  </data>
  <data name="MinGtMax" xml:space="preserve">
    <value>The minimum argument must be less than or equal to the maximum argument.</value>
  </data>
  <data name="MissingGuidAttrFromType" xml:space="preserve">
    <value>The type declaratin for '{0}' requires a Guid attribute to be used in this context.</value>
  </data>
  <data name="NoStackInfo" xml:space="preserve">
    <value>No stack information available.</value>
  </data>
  <data name="ObjectIsDisabled" xml:space="preserve">
    <value>The object is disabled.</value>
  </data>
  <data name="PropChangeSame" xml:space="preserve">
    <value>The Change method must be called from within the same property that is changing. It is recommended to omit the propertyName parameter to let the compiler determine its value automatically.</value>
  </data>
  <data name="PropIsReadOnly" xml:space="preserve">
    <value>The property '{0}' is read-only.</value>
  </data>
  <data name="PropSetMustCall" xml:space="preserve">
    <value>The Change method must only be called from the set block of a property in an object that inherits from NotifyPropertyChangeBase or one of its derived classes.</value>
  </data>
  <data name="StackUnderflow" xml:space="preserve">
    <value>The stack is empty.</value>
  </data>
  <data name="TamperDetected" xml:space="preserve">
    <value>An unexpected manipulation of the application has been detected, or the process memory has been corrupted. Please stop program execution inmediately.</value>
  </data>
  <data name="UndefinedEnum" xml:space="preserve">
    <value>the value '{0}' is outside of the defined values for the enum '{1}'.</value>
  </data>
  <data name="UnexpectedType" xml:space="preserve">
    <value>The {0} type is not valid in this context. A type of {0} was expected.</value>
  </data>
  <data name="ValueMustBeBetweenXandY" xml:space="preserve">
    <value>The value must be between {0} and {1}.</value>
  </data>
</root>